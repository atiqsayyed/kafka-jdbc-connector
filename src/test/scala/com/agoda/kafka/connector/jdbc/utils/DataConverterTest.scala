package com.agoda.kafka.connector.jdbc.utils

import java.net.URL
import java.math.BigDecimal
import java.sql.{Blob, Clob, NClob, ResultSet, ResultSetMetaData, SQLXML, Types, Date => SqlDate, Time => SqlTime, Timestamp => SqlTimestamp}

import org.apache.kafka.connect.data._
import org.apache.kafka.connect.errors.DataException
import org.mockito.Mockito._
import org.mockito.ArgumentMatchers._
import org.scalatest.mockito.MockitoSugar
import org.scalatest.{Matchers, WordSpec}

import scala.util.{Failure, Success}

class DataConverterTest extends WordSpec with Matchers with MockitoSugar {

  "Data Converter" should {

    val dataConverter = new DataConverter

    "create schema from result set metadata with non optional columns" in {
      val metaRS = mock[ResultSetMetaData]

      when(metaRS.getColumnCount).thenReturn(28)

      when(metaRS.getColumnName(1)).thenReturn("BOOLEAN")
      when(metaRS.getColumnName(2)).thenReturn("BIT")
      when(metaRS.getColumnName(3)).thenReturn("TINYINT")
      when(metaRS.getColumnName(4)).thenReturn("SMALLINT")
      when(metaRS.getColumnName(5)).thenReturn("INTEGER")
      when(metaRS.getColumnName(6)).thenReturn("BIGINT")
      when(metaRS.getColumnName(7)).thenReturn("REAL")
      when(metaRS.getColumnName(8)).thenReturn("FLOAT")
      when(metaRS.getColumnName(9)).thenReturn("DOUBLE")
      when(metaRS.getColumnName(10)).thenReturn("NUMERIC")
      when(metaRS.getColumnName(11)).thenReturn("DECIMAL")
      when(metaRS.getColumnName(12)).thenReturn("CHAR")
      when(metaRS.getColumnName(13)).thenReturn("VARCHAR")
      when(metaRS.getColumnName(14)).thenReturn("LONGVARCHAR")
      when(metaRS.getColumnName(15)).thenReturn("NCHAR")
      when(metaRS.getColumnName(16)).thenReturn("NVARCHAR")
      when(metaRS.getColumnName(17)).thenReturn("LONGNVARCHAR")
      when(metaRS.getColumnName(18)).thenReturn("CLOB")
      when(metaRS.getColumnName(19)).thenReturn("NCLOB")
      when(metaRS.getColumnName(20)).thenReturn("DATALINK")
      when(metaRS.getColumnName(21)).thenReturn("SQLXML")
      when(metaRS.getColumnName(22)).thenReturn("BINARY")
      when(metaRS.getColumnName(23)).thenReturn("BLOB")
      when(metaRS.getColumnName(24)).thenReturn("VARBINARY")
      when(metaRS.getColumnName(25)).thenReturn("LONGVARBINARY")
      when(metaRS.getColumnName(26)).thenReturn("DATE")
      when(metaRS.getColumnName(27)).thenReturn("TIME")
      when(metaRS.getColumnName(28)).thenReturn("TIMESTAMP")

      when(metaRS.getColumnLabel(1)).thenReturn("BOOLEAN")
      when(metaRS.getColumnLabel(2)).thenReturn("BIT")
      when(metaRS.getColumnLabel(3)).thenReturn("TINYINT")
      when(metaRS.getColumnLabel(4)).thenReturn("SMALLINT")
      when(metaRS.getColumnLabel(5)).thenReturn("INTEGER")
      when(metaRS.getColumnLabel(6)).thenReturn("BIGINT")
      when(metaRS.getColumnLabel(7)).thenReturn("REAL")
      when(metaRS.getColumnLabel(8)).thenReturn("FLOAT")
      when(metaRS.getColumnLabel(9)).thenReturn("DOUBLE")
      when(metaRS.getColumnLabel(10)).thenReturn("NUMERIC")
      when(metaRS.getColumnLabel(11)).thenReturn("DECIMAL")
      when(metaRS.getColumnLabel(12)).thenReturn("CHAR")
      when(metaRS.getColumnLabel(13)).thenReturn("VARCHAR")
      when(metaRS.getColumnLabel(14)).thenReturn("LONGVARCHAR")
      when(metaRS.getColumnLabel(15)).thenReturn("NCHAR")
      when(metaRS.getColumnLabel(16)).thenReturn("NVARCHAR")
      when(metaRS.getColumnLabel(17)).thenReturn("LONGNVARCHAR")
      when(metaRS.getColumnLabel(18)).thenReturn("CLOB")
      when(metaRS.getColumnLabel(19)).thenReturn("NCLOB")
      when(metaRS.getColumnLabel(20)).thenReturn("DATALINK")
      when(metaRS.getColumnLabel(21)).thenReturn("SQLXML")
      when(metaRS.getColumnLabel(22)).thenReturn("BINARY")
      when(metaRS.getColumnLabel(23)).thenReturn("BLOB")
      when(metaRS.getColumnLabel(24)).thenReturn("VARBINARY")
      when(metaRS.getColumnLabel(25)).thenReturn("LONGVARBINARY")
      when(metaRS.getColumnLabel(26)).thenReturn("DATE")
      when(metaRS.getColumnLabel(27)).thenReturn("TIME")
      when(metaRS.getColumnLabel(28)).thenReturn("TIMESTAMP")

      when(metaRS.getColumnType(1)).thenReturn(Types.BOOLEAN)
      when(metaRS.getColumnType(2)).thenReturn(Types.BIT)
      when(metaRS.getColumnType(3)).thenReturn(Types.TINYINT)
      when(metaRS.getColumnType(4)).thenReturn(Types.SMALLINT)
      when(metaRS.getColumnType(5)).thenReturn(Types.INTEGER)
      when(metaRS.getColumnType(6)).thenReturn(Types.BIGINT)
      when(metaRS.getColumnType(7)).thenReturn(Types.REAL)
      when(metaRS.getColumnType(8)).thenReturn(Types.FLOAT)
      when(metaRS.getColumnType(9)).thenReturn(Types.DOUBLE)
      when(metaRS.getColumnType(10)).thenReturn(Types.NUMERIC)
      when(metaRS.getColumnType(11)).thenReturn(Types.DECIMAL)
      when(metaRS.getColumnType(12)).thenReturn(Types.CHAR)
      when(metaRS.getColumnType(13)).thenReturn(Types.VARCHAR)
      when(metaRS.getColumnType(14)).thenReturn(Types.LONGVARCHAR)
      when(metaRS.getColumnType(15)).thenReturn(Types.NCHAR)
      when(metaRS.getColumnType(16)).thenReturn(Types.NVARCHAR)
      when(metaRS.getColumnType(17)).thenReturn(Types.LONGNVARCHAR)
      when(metaRS.getColumnType(18)).thenReturn(Types.CLOB)
      when(metaRS.getColumnType(19)).thenReturn(Types.NCLOB)
      when(metaRS.getColumnType(20)).thenReturn(Types.DATALINK)
      when(metaRS.getColumnType(21)).thenReturn(Types.SQLXML)
      when(metaRS.getColumnType(22)).thenReturn(Types.BINARY)
      when(metaRS.getColumnType(23)).thenReturn(Types.BLOB)
      when(metaRS.getColumnType(24)).thenReturn(Types.VARBINARY)
      when(metaRS.getColumnType(25)).thenReturn(Types.LONGVARBINARY)
      when(metaRS.getColumnType(26)).thenReturn(Types.DATE)
      when(metaRS.getColumnType(27)).thenReturn(Types.TIME)
      when(metaRS.getColumnType(28)).thenReturn(Types.TIMESTAMP)

      when(metaRS.isNullable(1)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(2)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(3)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(4)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(5)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(6)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(7)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(8)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(9)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(10)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(11)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(12)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(13)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(14)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(15)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(16)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(17)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(18)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(19)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(20)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(21)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(22)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(23)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(24)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(25)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(26)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(27)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(28)).thenReturn(ResultSetMetaData.columnNoNulls)

      when(metaRS.getScale(10)).thenReturn(2)
      when(metaRS.getScale(11)).thenReturn(3)

      val s = dataConverter.convertSchema("test-procedure", metaRS)

      s.map(_.name) shouldBe Success("test-procedure")
      s.map(_.field("BOOLEAN").schema()) shouldBe Success(Schema.BOOLEAN_SCHEMA)
      s.map(_.field("BIT").schema()) shouldBe Success(Schema.INT8_SCHEMA)
      s.map(_.field("TINYINT").schema()) shouldBe Success(Schema.INT8_SCHEMA)
      s.map(_.field("SMALLINT").schema()) shouldBe Success(Schema.INT16_SCHEMA)
      s.map(_.field("INTEGER").schema()) shouldBe Success(Schema.INT32_SCHEMA)
      s.map(_.field("BIGINT").schema()) shouldBe Success(Schema.INT64_SCHEMA)
      s.map(_.field("REAL").schema()) shouldBe Success(Schema.FLOAT32_SCHEMA)
      s.map(_.field("FLOAT").schema()) shouldBe Success(Schema.FLOAT64_SCHEMA)
      s.map(_.field("DOUBLE").schema()) shouldBe Success(Schema.FLOAT64_SCHEMA)
      s.map(_.field("NUMERIC").schema()) shouldBe Success(Decimal.builder(2).build())
      s.map(_.field("DECIMAL").schema()) shouldBe Success(Decimal.builder(3).build())
      s.map(_.field("CHAR").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("VARCHAR").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("LONGVARCHAR").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("NCHAR").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("NVARCHAR").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("LONGNVARCHAR").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("CLOB").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("NCLOB").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("DATALINK").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("SQLXML").schema()) shouldBe Success(Schema.STRING_SCHEMA)
      s.map(_.field("BINARY").schema()) shouldBe Success(Schema.BYTES_SCHEMA)
      s.map(_.field("BLOB").schema()) shouldBe Success(Schema.BYTES_SCHEMA)
      s.map(_.field("VARBINARY").schema()) shouldBe Success(Schema.BYTES_SCHEMA)
      s.map(_.field("LONGVARBINARY").schema()) shouldBe Success(Schema.BYTES_SCHEMA)
      s.map(_.field("DATE").schema()) shouldBe Success(Date.builder().build())
      s.map(_.field("TIME").schema()) shouldBe Success(Time.builder().build())
      s.map(_.field("TIMESTAMP").schema()) shouldBe Success(Timestamp.builder().build())
    }

    "create schema from result set metadata with optional columns" in {
      val metaRS = mock[ResultSetMetaData]

      when(metaRS.getColumnCount).thenReturn(28)

      when(metaRS.getColumnName(1)).thenReturn("BOOLEAN")
      when(metaRS.getColumnName(2)).thenReturn("BIT")
      when(metaRS.getColumnName(3)).thenReturn("TINYINT")
      when(metaRS.getColumnName(4)).thenReturn("SMALLINT")
      when(metaRS.getColumnName(5)).thenReturn("INTEGER")
      when(metaRS.getColumnName(6)).thenReturn("BIGINT")
      when(metaRS.getColumnName(7)).thenReturn("REAL")
      when(metaRS.getColumnName(8)).thenReturn("FLOAT")
      when(metaRS.getColumnName(9)).thenReturn("DOUBLE")
      when(metaRS.getColumnName(10)).thenReturn("NUMERIC")
      when(metaRS.getColumnName(11)).thenReturn("DECIMAL")
      when(metaRS.getColumnName(12)).thenReturn("CHAR")
      when(metaRS.getColumnName(13)).thenReturn("VARCHAR")
      when(metaRS.getColumnName(14)).thenReturn("LONGVARCHAR")
      when(metaRS.getColumnName(15)).thenReturn("NCHAR")
      when(metaRS.getColumnName(16)).thenReturn("NVARCHAR")
      when(metaRS.getColumnName(17)).thenReturn("LONGNVARCHAR")
      when(metaRS.getColumnName(18)).thenReturn("CLOB")
      when(metaRS.getColumnName(19)).thenReturn("NCLOB")
      when(metaRS.getColumnName(20)).thenReturn("DATALINK")
      when(metaRS.getColumnName(21)).thenReturn("SQLXML")
      when(metaRS.getColumnName(22)).thenReturn("BINARY")
      when(metaRS.getColumnName(23)).thenReturn("BLOB")
      when(metaRS.getColumnName(24)).thenReturn("VARBINARY")
      when(metaRS.getColumnName(25)).thenReturn("LONGVARBINARY")
      when(metaRS.getColumnName(26)).thenReturn("DATE")
      when(metaRS.getColumnName(27)).thenReturn("TIME")
      when(metaRS.getColumnName(28)).thenReturn("TIMESTAMP")

      when(metaRS.getColumnLabel(1)).thenReturn("BOOLEAN")
      when(metaRS.getColumnLabel(2)).thenReturn("BIT")
      when(metaRS.getColumnLabel(3)).thenReturn("TINYINT")
      when(metaRS.getColumnLabel(4)).thenReturn("SMALLINT")
      when(metaRS.getColumnLabel(5)).thenReturn("INTEGER")
      when(metaRS.getColumnLabel(6)).thenReturn("BIGINT")
      when(metaRS.getColumnLabel(7)).thenReturn("REAL")
      when(metaRS.getColumnLabel(8)).thenReturn("FLOAT")
      when(metaRS.getColumnLabel(9)).thenReturn("DOUBLE")
      when(metaRS.getColumnLabel(10)).thenReturn("NUMERIC")
      when(metaRS.getColumnLabel(11)).thenReturn("DECIMAL")
      when(metaRS.getColumnLabel(12)).thenReturn("CHAR")
      when(metaRS.getColumnLabel(13)).thenReturn("VARCHAR")
      when(metaRS.getColumnLabel(14)).thenReturn("LONGVARCHAR")
      when(metaRS.getColumnLabel(15)).thenReturn("NCHAR")
      when(metaRS.getColumnLabel(16)).thenReturn("NVARCHAR")
      when(metaRS.getColumnLabel(17)).thenReturn("LONGNVARCHAR")
      when(metaRS.getColumnLabel(18)).thenReturn("CLOB")
      when(metaRS.getColumnLabel(19)).thenReturn("NCLOB")
      when(metaRS.getColumnLabel(20)).thenReturn("DATALINK")
      when(metaRS.getColumnLabel(21)).thenReturn("SQLXML")
      when(metaRS.getColumnLabel(22)).thenReturn("BINARY")
      when(metaRS.getColumnLabel(23)).thenReturn("BLOB")
      when(metaRS.getColumnLabel(24)).thenReturn("VARBINARY")
      when(metaRS.getColumnLabel(25)).thenReturn("LONGVARBINARY")
      when(metaRS.getColumnLabel(26)).thenReturn("DATE")
      when(metaRS.getColumnLabel(27)).thenReturn("TIME")
      when(metaRS.getColumnLabel(28)).thenReturn("TIMESTAMP")

      when(metaRS.getColumnType(1)).thenReturn(Types.BOOLEAN)
      when(metaRS.getColumnType(2)).thenReturn(Types.BIT)
      when(metaRS.getColumnType(3)).thenReturn(Types.TINYINT)
      when(metaRS.getColumnType(4)).thenReturn(Types.SMALLINT)
      when(metaRS.getColumnType(5)).thenReturn(Types.INTEGER)
      when(metaRS.getColumnType(6)).thenReturn(Types.BIGINT)
      when(metaRS.getColumnType(7)).thenReturn(Types.REAL)
      when(metaRS.getColumnType(8)).thenReturn(Types.FLOAT)
      when(metaRS.getColumnType(9)).thenReturn(Types.DOUBLE)
      when(metaRS.getColumnType(10)).thenReturn(Types.NUMERIC)
      when(metaRS.getColumnType(11)).thenReturn(Types.DECIMAL)
      when(metaRS.getColumnType(12)).thenReturn(Types.CHAR)
      when(metaRS.getColumnType(13)).thenReturn(Types.VARCHAR)
      when(metaRS.getColumnType(14)).thenReturn(Types.LONGVARCHAR)
      when(metaRS.getColumnType(15)).thenReturn(Types.NCHAR)
      when(metaRS.getColumnType(16)).thenReturn(Types.NVARCHAR)
      when(metaRS.getColumnType(17)).thenReturn(Types.LONGNVARCHAR)
      when(metaRS.getColumnType(18)).thenReturn(Types.CLOB)
      when(metaRS.getColumnType(19)).thenReturn(Types.NCLOB)
      when(metaRS.getColumnType(20)).thenReturn(Types.DATALINK)
      when(metaRS.getColumnType(21)).thenReturn(Types.SQLXML)
      when(metaRS.getColumnType(22)).thenReturn(Types.BINARY)
      when(metaRS.getColumnType(23)).thenReturn(Types.BLOB)
      when(metaRS.getColumnType(24)).thenReturn(Types.VARBINARY)
      when(metaRS.getColumnType(25)).thenReturn(Types.LONGVARBINARY)
      when(metaRS.getColumnType(26)).thenReturn(Types.DATE)
      when(metaRS.getColumnType(27)).thenReturn(Types.TIME)
      when(metaRS.getColumnType(28)).thenReturn(Types.TIMESTAMP)

      when(metaRS.isNullable(1)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(2)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(3)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(4)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(5)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(6)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(7)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(8)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(9)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(10)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(11)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(12)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(13)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(14)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(15)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(16)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(17)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(18)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(19)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(20)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(21)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(22)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(23)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(24)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(25)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(26)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(27)).thenReturn(ResultSetMetaData.columnNullable)
      when(metaRS.isNullable(28)).thenReturn(ResultSetMetaData.columnNullable)

      when(metaRS.getScale(10)).thenReturn(2)
      when(metaRS.getScale(11)).thenReturn(3)

      val s = dataConverter.convertSchema("test-procedure", metaRS)

      s.map(_.name) shouldBe Success("test-procedure")
      s.map(_.field("BOOLEAN").schema()) shouldBe Success(Schema.OPTIONAL_BOOLEAN_SCHEMA)
      s.map(_.field("BIT").schema()) shouldBe Success(Schema.OPTIONAL_INT8_SCHEMA)
      s.map(_.field("TINYINT").schema()) shouldBe Success(Schema.OPTIONAL_INT8_SCHEMA)
      s.map(_.field("SMALLINT").schema()) shouldBe Success(Schema.OPTIONAL_INT16_SCHEMA)
      s.map(_.field("INTEGER").schema()) shouldBe Success(Schema.OPTIONAL_INT32_SCHEMA)
      s.map(_.field("BIGINT").schema()) shouldBe Success(Schema.OPTIONAL_INT64_SCHEMA)
      s.map(_.field("REAL").schema()) shouldBe Success(Schema.OPTIONAL_FLOAT32_SCHEMA)
      s.map(_.field("FLOAT").schema()) shouldBe Success(Schema.OPTIONAL_FLOAT64_SCHEMA)
      s.map(_.field("DOUBLE").schema()) shouldBe Success(Schema.OPTIONAL_FLOAT64_SCHEMA)
      s.map(_.field("NUMERIC").schema()) shouldBe Success(Decimal.builder(2).optional().build())
      s.map(_.field("DECIMAL").schema()) shouldBe Success(Decimal.builder(3).optional().build())
      s.map(_.field("CHAR").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("VARCHAR").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("LONGVARCHAR").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("NCHAR").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("NVARCHAR").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("LONGNVARCHAR").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("CLOB").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("NCLOB").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("DATALINK").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("SQLXML").schema()) shouldBe Success(Schema.OPTIONAL_STRING_SCHEMA)
      s.map(_.field("BINARY").schema()) shouldBe Success(Schema.OPTIONAL_BYTES_SCHEMA)
      s.map(_.field("BLOB").schema()) shouldBe Success(Schema.OPTIONAL_BYTES_SCHEMA)
      s.map(_.field("VARBINARY").schema()) shouldBe Success(Schema.OPTIONAL_BYTES_SCHEMA)
      s.map(_.field("LONGVARBINARY").schema()) shouldBe Success(Schema.OPTIONAL_BYTES_SCHEMA)
      s.map(_.field("DATE").schema()) shouldBe Success(Date.builder().optional().build())
      s.map(_.field("TIME").schema()) shouldBe Success(Time.builder().optional().build())
      s.map(_.field("TIMESTAMP").schema()) shouldBe Success(Timestamp.builder().optional().build())
    }

    "skip unsupported SQL types while creating schema" in {
      val metaRS = mock[ResultSetMetaData]

      when(metaRS.getColumnCount).thenReturn(2)
      when(metaRS.getColumnName(1)).thenReturn("KEY")
      when(metaRS.getColumnName(2)).thenReturn("VALUE")
      when(metaRS.getColumnLabel(1)).thenReturn(null)
      when(metaRS.getColumnLabel(2)).thenReturn("")
      when(metaRS.getColumnType(1)).thenReturn(Types.INTEGER)
      when(metaRS.getColumnType(2)).thenReturn(Types.JAVA_OBJECT)
      when(metaRS.isNullable(1)).thenReturn(ResultSetMetaData.columnNoNulls)
      when(metaRS.isNullable(2)).thenReturn(ResultSetMetaData.columnNullableUnknown)

      val s = dataConverter.convertSchema("test-procedure-unsupported", metaRS)

      s.map(_.name) shouldBe Success("test-procedure-unsupported")
      s.map(_.fields.size) shouldBe Success(1)
      s.map(_.field("KEY").schema()) shouldBe Success(Schema.INT32_SCHEMA)
    }

    "convert record from result set with non optional columns" in {
      val rS = mock[ResultSet]
      val metaRS = mock[ResultSetMetaData]
      val blob = mock[Blob]
      val clob = mock[Clob]
      val nClob = mock[NClob]
      val sqlXml = mock[SQLXML]

      val builder = SchemaBuilder.struct().name("test")
      builder.field("BOOLEAN", Schema.BOOLEAN_SCHEMA)
      builder.field("BIT", Schema.INT8_SCHEMA)
      builder.field("TINYINT", Schema.INT8_SCHEMA)
      builder.field("SMALLINT", Schema.INT16_SCHEMA)
      builder.field("INTEGER", Schema.INT32_SCHEMA)
      builder.field("BIGINT", Schema.INT64_SCHEMA)
      builder.field("REAL", Schema.FLOAT32_SCHEMA)
      builder.field("FLOAT", Schema.FLOAT64_SCHEMA)
      builder.field("DOUBLE", Schema.FLOAT64_SCHEMA)
      builder.field("NUMERIC", Decimal.builder(1).build())
      builder.field("DECIMAL", Decimal.builder(1).build())
      builder.field("CHAR", Schema.STRING_SCHEMA)
      builder.field("VARCHAR", Schema.STRING_SCHEMA)
      builder.field("LONGVARCHAR", Schema.STRING_SCHEMA)
      builder.field("NCHAR", Schema.STRING_SCHEMA)
      builder.field("NVARCHAR", Schema.STRING_SCHEMA)
      builder.field("LONGNVARCHAR", Schema.STRING_SCHEMA)
      builder.field("CLOB", Schema.STRING_SCHEMA)
      builder.field("NCLOB", Schema.STRING_SCHEMA)
      builder.field("DATALINK", Schema.STRING_SCHEMA)
      builder.field("SQLXML", Schema.STRING_SCHEMA)
      builder.field("BINARY", Schema.BYTES_SCHEMA)
      builder.field("VARBINARY", Schema.BYTES_SCHEMA)
      builder.field("LONGVARBINARY", Schema.BYTES_SCHEMA)
      builder.field("BLOB", Schema.BYTES_SCHEMA)
      builder.field("DATE", Date.builder().build())
      builder.field("TIME", Time.builder().build())
      builder.field("TIMESTAMP", Timestamp.builder().build())
      val schema = builder.build()

      when(rS.wasNull()).thenReturn(false)
      when(rS.getMetaData).thenReturn(metaRS)
      when(metaRS.getColumnCount).thenReturn(28)

      when(metaRS.getColumnName(1)).thenReturn("BOOLEAN")
      when(metaRS.getColumnName(2)).thenReturn("BIT")
      when(metaRS.getColumnName(3)).thenReturn("TINYINT")
      when(metaRS.getColumnName(4)).thenReturn("SMALLINT")
      when(metaRS.getColumnName(5)).thenReturn("INTEGER")
      when(metaRS.getColumnName(6)).thenReturn("BIGINT")
      when(metaRS.getColumnName(7)).thenReturn("REAL")
      when(metaRS.getColumnName(8)).thenReturn("FLOAT")
      when(metaRS.getColumnName(9)).thenReturn("DOUBLE")
      when(metaRS.getColumnName(10)).thenReturn("NUMERIC")
      when(metaRS.getColumnName(11)).thenReturn("DECIMAL")
      when(metaRS.getColumnName(12)).thenReturn("CHAR")
      when(metaRS.getColumnName(13)).thenReturn("VARCHAR")
      when(metaRS.getColumnName(14)).thenReturn("LONGVARCHAR")
      when(metaRS.getColumnName(15)).thenReturn("NCHAR")
      when(metaRS.getColumnName(16)).thenReturn("NVARCHAR")
      when(metaRS.getColumnName(17)).thenReturn("LONGNVARCHAR")
      when(metaRS.getColumnName(18)).thenReturn("CLOB")
      when(metaRS.getColumnName(19)).thenReturn("NCLOB")
      when(metaRS.getColumnName(20)).thenReturn("DATALINK")
      when(metaRS.getColumnName(21)).thenReturn("SQLXML")
      when(metaRS.getColumnName(22)).thenReturn("BINARY")
      when(metaRS.getColumnName(23)).thenReturn("VARBINARY")
      when(metaRS.getColumnName(24)).thenReturn("LONGVARBINARY")
      when(metaRS.getColumnName(25)).thenReturn("BLOB")
      when(metaRS.getColumnName(26)).thenReturn("DATE")
      when(metaRS.getColumnName(27)).thenReturn("TIME")
      when(metaRS.getColumnName(28)).thenReturn("TIMESTAMP")

      when(metaRS.getColumnLabel(1)).thenReturn("BOOLEAN")
      when(metaRS.getColumnLabel(2)).thenReturn("BIT")
      when(metaRS.getColumnLabel(3)).thenReturn("TINYINT")
      when(metaRS.getColumnLabel(4)).thenReturn("SMALLINT")
      when(metaRS.getColumnLabel(5)).thenReturn("INTEGER")
      when(metaRS.getColumnLabel(6)).thenReturn("BIGINT")
      when(metaRS.getColumnLabel(7)).thenReturn("REAL")
      when(metaRS.getColumnLabel(8)).thenReturn("FLOAT")
      when(metaRS.getColumnLabel(9)).thenReturn("DOUBLE")
      when(metaRS.getColumnLabel(10)).thenReturn("NUMERIC")
      when(metaRS.getColumnLabel(11)).thenReturn("DECIMAL")
      when(metaRS.getColumnLabel(12)).thenReturn("CHAR")
      when(metaRS.getColumnLabel(13)).thenReturn("VARCHAR")
      when(metaRS.getColumnLabel(14)).thenReturn("LONGVARCHAR")
      when(metaRS.getColumnLabel(15)).thenReturn("NCHAR")
      when(metaRS.getColumnLabel(16)).thenReturn("NVARCHAR")
      when(metaRS.getColumnLabel(17)).thenReturn("LONGNVARCHAR")
      when(metaRS.getColumnLabel(18)).thenReturn("CLOB")
      when(metaRS.getColumnLabel(19)).thenReturn("NCLOB")
      when(metaRS.getColumnLabel(20)).thenReturn("DATALINK")
      when(metaRS.getColumnLabel(21)).thenReturn("SQLXML")
      when(metaRS.getColumnLabel(22)).thenReturn("BINARY")
      when(metaRS.getColumnLabel(23)).thenReturn("VARBINARY")
      when(metaRS.getColumnLabel(24)).thenReturn("LONGVARBINARY")
      when(metaRS.getColumnLabel(25)).thenReturn("BLOB")
      when(metaRS.getColumnLabel(26)).thenReturn("DATE")
      when(metaRS.getColumnLabel(27)).thenReturn("TIME")
      when(metaRS.getColumnLabel(28)).thenReturn("TIMESTAMP")

      when(metaRS.getColumnType(1)).thenReturn(Types.BOOLEAN)
      when(metaRS.getColumnType(2)).thenReturn(Types.BIT)
      when(metaRS.getColumnType(3)).thenReturn(Types.TINYINT)
      when(metaRS.getColumnType(4)).thenReturn(Types.SMALLINT)
      when(metaRS.getColumnType(5)).thenReturn(Types.INTEGER)
      when(metaRS.getColumnType(6)).thenReturn(Types.BIGINT)
      when(metaRS.getColumnType(7)).thenReturn(Types.REAL)
      when(metaRS.getColumnType(8)).thenReturn(Types.FLOAT)
      when(metaRS.getColumnType(9)).thenReturn(Types.DOUBLE)
      when(metaRS.getColumnType(10)).thenReturn(Types.NUMERIC)
      when(metaRS.getColumnType(11)).thenReturn(Types.DECIMAL)
      when(metaRS.getColumnType(12)).thenReturn(Types.CHAR)
      when(metaRS.getColumnType(13)).thenReturn(Types.VARCHAR)
      when(metaRS.getColumnType(14)).thenReturn(Types.LONGVARCHAR)
      when(metaRS.getColumnType(15)).thenReturn(Types.NCHAR)
      when(metaRS.getColumnType(16)).thenReturn(Types.NVARCHAR)
      when(metaRS.getColumnType(17)).thenReturn(Types.LONGNVARCHAR)
      when(metaRS.getColumnType(18)).thenReturn(Types.CLOB)
      when(metaRS.getColumnType(19)).thenReturn(Types.NCLOB)
      when(metaRS.getColumnType(20)).thenReturn(Types.DATALINK)
      when(metaRS.getColumnType(21)).thenReturn(Types.SQLXML)
      when(metaRS.getColumnType(22)).thenReturn(Types.BINARY)
      when(metaRS.getColumnType(23)).thenReturn(Types.VARBINARY)
      when(metaRS.getColumnType(24)).thenReturn(Types.LONGVARBINARY)
      when(metaRS.getColumnType(25)).thenReturn(Types.BLOB)
      when(metaRS.getColumnType(26)).thenReturn(Types.DATE)
      when(metaRS.getColumnType(27)).thenReturn(Types.TIME)
      when(metaRS.getColumnType(28)).thenReturn(Types.TIMESTAMP)

      when(blob.getBytes(1, blob.length.toInt)).thenReturn("25".toCharArray.map(_.toByte))
      when(clob.getSubString(1, clob.length.toInt)).thenReturn("18")
      when(nClob.getSubString(1, clob.length.toInt)).thenReturn("19")
      when(sqlXml.getString).thenReturn("21")

      when(rS.getBoolean(1)).thenReturn(true)
      when(rS.getByte(2)).thenReturn(2.toByte)
      when(rS.getByte(3)).thenReturn(3.toByte)
      when(rS.getShort(4)).thenReturn(4.toShort)
      when(rS.getInt(5)).thenReturn(5)
      when(rS.getLong(6)).thenReturn(6L)
      when(rS.getFloat(7)).thenReturn(7.0F)
      when(rS.getDouble(8)).thenReturn(8.0)
      when(rS.getDouble(9)).thenReturn(9.0)
      when(rS.getBigDecimal(10)).thenReturn(new BigDecimal("10.0"))
      when(rS.getBigDecimal(11)).thenReturn(new BigDecimal("11.0"))
      when(rS.getString(12)).thenReturn("12")
      when(rS.getString(13)).thenReturn("13")
      when(rS.getString(14)).thenReturn("14")
      when(rS.getNString(15)).thenReturn("15")
      when(rS.getNString(16)).thenReturn("16")
      when(rS.getNString(17)).thenReturn("17")
      when(rS.getClob(18)).thenReturn(clob)
      when(rS.getNClob(19)).thenReturn(nClob)
      when(rS.getURL(20)).thenReturn(new URL("http://20"))
      when(rS.getSQLXML(21)).thenReturn(sqlXml)
      when(rS.getBytes(22)).thenReturn("22".toCharArray.map(_.toByte))
      when(rS.getBytes(23)).thenReturn("23".toCharArray.map(_.toByte))
      when(rS.getBytes(24)).thenReturn("24".toCharArray.map(_.toByte))
      when(rS.getBlob(25)).thenReturn(blob)
      when(rS.getDate(same(26), any())).thenReturn(new SqlDate(26L))
      when(rS.getTime(same(27), any())).thenReturn(new SqlTime(27L))
      when(rS.getTimestamp(same(28), any())).thenReturn(new SqlTimestamp(28L))

      val r = dataConverter.convertRecord(schema, rS)

      r.map(_.schema) shouldBe Success(schema)
      r.map(_.getBoolean("BOOLEAN")) shouldBe Success(true)
      r.map(_.getInt8("BIT")) shouldBe Success(2)
      r.map(_.getInt8("TINYINT")) shouldBe Success(3)
      r.map(_.getInt16("SMALLINT")) shouldBe Success(4)
      r.map(_.getInt32("INTEGER")) shouldBe Success(5)
      r.map(_.getInt64("BIGINT")) shouldBe Success(6L)
      r.map(_.getFloat32("REAL")) shouldBe Success(7.0F)
      r.map(_.getFloat64("FLOAT")) shouldBe Success(8.0F)
      r.map(_.getFloat64("DOUBLE")) shouldBe Success(9.0F)
      r.map(_.get("NUMERIC")) shouldBe Success(new BigDecimal("10.0"))
      r.map(_.get("DECIMAL")) shouldBe Success(new BigDecimal("11.0"))
      r.map(_.getString("CHAR")) shouldBe Success("12")
      r.map(_.getString("VARCHAR")) shouldBe Success("13")
      r.map(_.getString("LONGVARCHAR")) shouldBe Success("14")
      r.map(_.getString("NCHAR")) shouldBe Success("15")
      r.map(_.getString("NVARCHAR")) shouldBe Success("16")
      r.map(_.getString("LONGNVARCHAR")) shouldBe Success("17")
      r.map(_.getString("CLOB")) shouldBe Success("18")
      r.map(_.getString("NCLOB")) shouldBe Success("19")
      r.map(_.getString("DATALINK")) shouldBe Success("http://20")
      r.map(_.getString("SQLXML")) shouldBe Success("21")
      r.map(_.getBytes("BINARY").toSeq) shouldBe Success(Seq('2', '2'))
      r.map(_.getBytes("VARBINARY").toSeq) shouldBe Success(Seq('2', '3'))
      r.map(_.getBytes("LONGVARBINARY").toSeq) shouldBe Success(Seq('2', '4'))
      r.map(_.getBytes("BLOB").toSeq) shouldBe Success(Seq('2', '5'))
      r.map(_.get("DATE")) shouldBe Success(new SqlDate(26L))
      r.map(_.get("TIME")) shouldBe Success(new SqlTime(27L))
      r.map(_.get("TIMESTAMP")) shouldBe Success(new SqlTimestamp(28L))
    }

    "convert record from result set with optional columns" in {
      val rS = mock[ResultSet]
      val metaRS = mock[ResultSetMetaData]

      val builder = SchemaBuilder.struct().name("test")
      builder.field("BOOLEAN", Schema.OPTIONAL_BOOLEAN_SCHEMA)
      builder.field("BIT", Schema.OPTIONAL_INT8_SCHEMA)
      builder.field("TINYINT", Schema.OPTIONAL_INT8_SCHEMA)
      builder.field("SMALLINT", Schema.OPTIONAL_INT16_SCHEMA)
      builder.field("INTEGER", Schema.OPTIONAL_INT32_SCHEMA)
      builder.field("BIGINT", Schema.OPTIONAL_INT64_SCHEMA)
      builder.field("REAL", Schema.OPTIONAL_FLOAT32_SCHEMA)
      builder.field("FLOAT", Schema.OPTIONAL_FLOAT64_SCHEMA)
      builder.field("DOUBLE", Schema.OPTIONAL_FLOAT64_SCHEMA)
      builder.field("NUMERIC", Decimal.builder(1).optional().build())
      builder.field("DECIMAL", Decimal.builder(1).optional().build())
      builder.field("CHAR", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("VARCHAR", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("LONGVARCHAR", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("NCHAR", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("NVARCHAR", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("LONGNVARCHAR", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("CLOB", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("NCLOB", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("DATALINK", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("SQLXML", Schema.OPTIONAL_STRING_SCHEMA)
      builder.field("BINARY", Schema.OPTIONAL_BYTES_SCHEMA)
      builder.field("VARBINARY", Schema.OPTIONAL_BYTES_SCHEMA)
      builder.field("LONGVARBINARY", Schema.OPTIONAL_BYTES_SCHEMA)
      builder.field("BLOB", Schema.OPTIONAL_BYTES_SCHEMA)
      builder.field("DATE", Date.builder().optional().build())
      builder.field("TIME", Time.builder().optional().build())
      builder.field("TIMESTAMP", Timestamp.builder().optional().build())
      val schema = builder.build()

      when(rS.wasNull()).thenReturn(false)
      when(rS.getMetaData).thenReturn(metaRS)
      when(metaRS.getColumnCount).thenReturn(28)

      when(metaRS.getColumnName(1)).thenReturn("BOOLEAN")
      when(metaRS.getColumnName(2)).thenReturn("BIT")
      when(metaRS.getColumnName(3)).thenReturn("TINYINT")
      when(metaRS.getColumnName(4)).thenReturn("SMALLINT")
      when(metaRS.getColumnName(5)).thenReturn("INTEGER")
      when(metaRS.getColumnName(6)).thenReturn("BIGINT")
      when(metaRS.getColumnName(7)).thenReturn("REAL")
      when(metaRS.getColumnName(8)).thenReturn("FLOAT")
      when(metaRS.getColumnName(9)).thenReturn("DOUBLE")
      when(metaRS.getColumnName(10)).thenReturn("NUMERIC")
      when(metaRS.getColumnName(11)).thenReturn("DECIMAL")
      when(metaRS.getColumnName(12)).thenReturn("CHAR")
      when(metaRS.getColumnName(13)).thenReturn("VARCHAR")
      when(metaRS.getColumnName(14)).thenReturn("LONGVARCHAR")
      when(metaRS.getColumnName(15)).thenReturn("NCHAR")
      when(metaRS.getColumnName(16)).thenReturn("NVARCHAR")
      when(metaRS.getColumnName(17)).thenReturn("LONGNVARCHAR")
      when(metaRS.getColumnName(18)).thenReturn("CLOB")
      when(metaRS.getColumnName(19)).thenReturn("NCLOB")
      when(metaRS.getColumnName(20)).thenReturn("DATALINK")
      when(metaRS.getColumnName(21)).thenReturn("SQLXML")
      when(metaRS.getColumnName(22)).thenReturn("BINARY")
      when(metaRS.getColumnName(23)).thenReturn("VARBINARY")
      when(metaRS.getColumnName(24)).thenReturn("LONGVARBINARY")
      when(metaRS.getColumnName(25)).thenReturn("BLOB")
      when(metaRS.getColumnName(26)).thenReturn("DATE")
      when(metaRS.getColumnName(27)).thenReturn("TIME")
      when(metaRS.getColumnName(28)).thenReturn("TIMESTAMP")

      when(metaRS.getColumnLabel(1)).thenReturn("BOOLEAN")
      when(metaRS.getColumnLabel(2)).thenReturn("BIT")
      when(metaRS.getColumnLabel(3)).thenReturn("TINYINT")
      when(metaRS.getColumnLabel(4)).thenReturn("SMALLINT")
      when(metaRS.getColumnLabel(5)).thenReturn("INTEGER")
      when(metaRS.getColumnLabel(6)).thenReturn("BIGINT")
      when(metaRS.getColumnLabel(7)).thenReturn("REAL")
      when(metaRS.getColumnLabel(8)).thenReturn("FLOAT")
      when(metaRS.getColumnLabel(9)).thenReturn("DOUBLE")
      when(metaRS.getColumnLabel(10)).thenReturn("NUMERIC")
      when(metaRS.getColumnLabel(11)).thenReturn("DECIMAL")
      when(metaRS.getColumnLabel(12)).thenReturn("CHAR")
      when(metaRS.getColumnLabel(13)).thenReturn("VARCHAR")
      when(metaRS.getColumnLabel(14)).thenReturn("LONGVARCHAR")
      when(metaRS.getColumnLabel(15)).thenReturn("NCHAR")
      when(metaRS.getColumnLabel(16)).thenReturn("NVARCHAR")
      when(metaRS.getColumnLabel(17)).thenReturn("LONGNVARCHAR")
      when(metaRS.getColumnLabel(18)).thenReturn("CLOB")
      when(metaRS.getColumnLabel(19)).thenReturn("NCLOB")
      when(metaRS.getColumnLabel(20)).thenReturn("DATALINK")
      when(metaRS.getColumnLabel(21)).thenReturn("SQLXML")
      when(metaRS.getColumnLabel(22)).thenReturn("BINARY")
      when(metaRS.getColumnLabel(23)).thenReturn("VARBINARY")
      when(metaRS.getColumnLabel(24)).thenReturn("LONGVARBINARY")
      when(metaRS.getColumnLabel(25)).thenReturn("BLOB")
      when(metaRS.getColumnLabel(26)).thenReturn("DATE")
      when(metaRS.getColumnLabel(27)).thenReturn("TIME")
      when(metaRS.getColumnLabel(28)).thenReturn("TIMESTAMP")

      when(metaRS.getColumnType(1)).thenReturn(Types.BOOLEAN)
      when(metaRS.getColumnType(2)).thenReturn(Types.BIT)
      when(metaRS.getColumnType(3)).thenReturn(Types.TINYINT)
      when(metaRS.getColumnType(4)).thenReturn(Types.SMALLINT)
      when(metaRS.getColumnType(5)).thenReturn(Types.INTEGER)
      when(metaRS.getColumnType(6)).thenReturn(Types.BIGINT)
      when(metaRS.getColumnType(7)).thenReturn(Types.REAL)
      when(metaRS.getColumnType(8)).thenReturn(Types.FLOAT)
      when(metaRS.getColumnType(9)).thenReturn(Types.DOUBLE)
      when(metaRS.getColumnType(10)).thenReturn(Types.NUMERIC)
      when(metaRS.getColumnType(11)).thenReturn(Types.DECIMAL)
      when(metaRS.getColumnType(12)).thenReturn(Types.CHAR)
      when(metaRS.getColumnType(13)).thenReturn(Types.VARCHAR)
      when(metaRS.getColumnType(14)).thenReturn(Types.LONGVARCHAR)
      when(metaRS.getColumnType(15)).thenReturn(Types.NCHAR)
      when(metaRS.getColumnType(16)).thenReturn(Types.NVARCHAR)
      when(metaRS.getColumnType(17)).thenReturn(Types.LONGNVARCHAR)
      when(metaRS.getColumnType(18)).thenReturn(Types.CLOB)
      when(metaRS.getColumnType(19)).thenReturn(Types.NCLOB)
      when(metaRS.getColumnType(20)).thenReturn(Types.DATALINK)
      when(metaRS.getColumnType(21)).thenReturn(Types.SQLXML)
      when(metaRS.getColumnType(22)).thenReturn(Types.BINARY)
      when(metaRS.getColumnType(23)).thenReturn(Types.VARBINARY)
      when(metaRS.getColumnType(24)).thenReturn(Types.LONGVARBINARY)
      when(metaRS.getColumnType(25)).thenReturn(Types.BLOB)
      when(metaRS.getColumnType(26)).thenReturn(Types.DATE)
      when(metaRS.getColumnType(27)).thenReturn(Types.TIME)
      when(metaRS.getColumnType(28)).thenReturn(Types.TIMESTAMP)

      when(rS.getBigDecimal(10)).thenReturn(null)
      when(rS.getBigDecimal(11)).thenReturn(null)
      when(rS.getString(12)).thenReturn(null)
      when(rS.getString(13)).thenReturn(null)
      when(rS.getString(14)).thenReturn(null)
      when(rS.getNString(15)).thenReturn(null)
      when(rS.getNString(16)).thenReturn(null)
      when(rS.getNString(17)).thenReturn(null)
      when(rS.getClob(18)).thenReturn(null)
      when(rS.getNClob(19)).thenReturn(null)
      when(rS.getURL(20)).thenReturn(null)
      when(rS.getSQLXML(21)).thenReturn(null)
      when(rS.getBytes(22)).thenReturn(null)
      when(rS.getBytes(23)).thenReturn(null)
      when(rS.getBytes(24)).thenReturn(null)
      when(rS.getBlob(25)).thenReturn(null)
      when(rS.getDate(same(26), any())).thenReturn(null)
      when(rS.getTime(same(27), any())).thenReturn(null)
      when(rS.getTimestamp(same(28), any())).thenReturn(null)

      val r = dataConverter.convertRecord(schema, rS)

      r.map(_.schema) shouldBe Success(schema)
      r.map(_.getBoolean("BOOLEAN")) shouldBe Success(false)
      r.map(_.getInt8("BIT")) shouldBe Success(0)
      r.map(_.getInt8("TINYINT")) shouldBe Success(0)
      r.map(_.getInt16("SMALLINT")) shouldBe Success(0)
      r.map(_.getInt32("INTEGER")) shouldBe Success(0)
      r.map(_.getInt64("BIGINT")) shouldBe Success(0L)
      r.map(_.getFloat32("REAL")) shouldBe Success(0.0F)
      r.map(_.getFloat64("FLOAT")) shouldBe Success(0.0F)
      r.map(_.getFloat64("DOUBLE")) shouldBe Success(0.0F)
      r.map(_.get("NUMERIC")) shouldBe Success(null)
      r.map(_.get("DECIMAL")) shouldBe Success(null)
      r.map(_.getString("CHAR")) shouldBe Success(null)
      r.map(_.getString("VARCHAR")) shouldBe Success(null)
      r.map(_.getString("LONGVARCHAR")) shouldBe Success(null)
      r.map(_.getString("NCHAR")) shouldBe Success(null)
      r.map(_.getString("NVARCHAR")) shouldBe Success(null)
      r.map(_.getString("LONGNVARCHAR")) shouldBe Success(null)
      r.map(_.getString("CLOB")) shouldBe Success(null)
      r.map(_.getString("NCLOB")) shouldBe Success(null)
      r.map(_.getString("DATALINK")) shouldBe Success(null)
      r.map(_.getString("SQLXML")) shouldBe Success(null)
      r.map(_.getBytes("BINARY")) shouldBe Success(null)
      r.map(_.getBytes("VARBINARY")) shouldBe Success(null)
      r.map(_.getBytes("LONGVARBINARY")) shouldBe Success(null)
      r.map(_.getBytes("BLOB")) shouldBe Success(null)
      r.map(_.get("DATE")) shouldBe Success(null)
      r.map(_.get("TIME")) shouldBe Success(null)
      r.map(_.get("TIMESTAMP")) shouldBe Success(null)
    }

    "return null for unsupported SQL types while converting record" in {
      val rS = mock[ResultSet]
      val metaRS = mock[ResultSetMetaData]

      val builder = SchemaBuilder.struct().name("test")
      builder.field("KEY", Schema.INT32_SCHEMA)
      builder.field("VALUE", Schema.OPTIONAL_STRING_SCHEMA)
      val schema = builder.build()

      when(rS.getMetaData).thenReturn(metaRS)
      when(metaRS.getColumnCount).thenReturn(2)
      when(metaRS.getColumnName(1)).thenReturn("KEY")
      when(metaRS.getColumnName(2)).thenReturn("VALUE")
      when(metaRS.getColumnLabel(1)).thenReturn("KEY")
      when(metaRS.getColumnLabel(2)).thenReturn("VALUE")
      when(metaRS.getColumnType(1)).thenReturn(Types.INTEGER)
      when(metaRS.getColumnType(2)).thenReturn(Types.NULL)
      when(rS.getInt(1)).thenReturn(5)

      val r = dataConverter.convertRecord(schema, rS)

      r.map(_.schema) shouldBe Success(schema)
      r.map(_.getInt32("KEY")) shouldBe Success(5)
      r.map(_.getString("VALUE")) shouldBe Success(null)
    }

    "fails if result set is null" in {
      val rS = null

      val builder = SchemaBuilder.struct().name("test")
      builder.field("KEY", Schema.INT32_SCHEMA)
      builder.field("VALUE", Schema.OPTIONAL_STRING_SCHEMA)
      val schema = builder.build()

      val r = dataConverter.convertRecord(schema, rS)

      r.getClass shouldBe Failure(new NullPointerException).getClass
    }

    "fail if schema and result set don't match" in {
      val rS = mock[ResultSet]
      val metaRS = mock[ResultSetMetaData]

      val builder = SchemaBuilder.struct().name("test")
      builder.field("KEY", Schema.INT32_SCHEMA)
      builder.field("VALUE", Schema.BOOLEAN_SCHEMA)
      val schema = builder.build()

      when(rS.getMetaData).thenReturn(metaRS)
      when(metaRS.getColumnCount).thenReturn(2)
      when(metaRS.getColumnName(1)).thenReturn("KEY")
      when(metaRS.getColumnName(2)).thenReturn("VALUE")
      when(metaRS.getColumnLabel(1)).thenReturn("KEY")
      when(metaRS.getColumnLabel(2)).thenReturn("VALUE")
      when(metaRS.getColumnType(1)).thenReturn(Types.INTEGER)
      when(metaRS.getColumnType(2)).thenReturn(Types.DOUBLE)
      when(rS.getInt(1)).thenReturn(5)
      when(rS.getDouble(2)).thenReturn(3.14)

      val r = dataConverter.convertRecord(schema, rS)

      r.isFailure shouldEqual true
      the [DataException] thrownBy r.get
    }
  }
}
